name: Build and Package

on:
  push:
    branches: ["main"]
    tags: ["v*", "*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            artifact: 'qt6.10.0-full-dev'
            modules: 'qt.tools.ifw.410'
          - os: windows-latest
            artifact: 'qt6.10.0-full-dev'
            modules: 'qt.tools.ifw.410'
          - os: macos-latest
            artifact: 'qt6.10.0-full-dev'
            modules: 'qt.tools.ifw.410'
          - os: ubuntu-24.04-arm
            artifact: 'qt6.10.0-full-dev'
            modules: 'qt.tools.ifw.410'
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: TheMrMilchmann/setup-msvc-dev@v4
        if: startsWith(matrix.os, 'windows-')
        with:
          arch: x64

      - name: Install Qt
        uses: akshaybabloo/actions-setup-qt@v1
        with:
          username: ${{ secrets.QT_USERNAME }}
          password: ${{ secrets.QT_PASSWORD }}
          version: ${{ matrix.artifact}}
          install-deps: 'true'
          cache: 'true'
          modules: ${{ matrix.modules }}

      - name: Install CMake 4+
        uses: akshaybabloo/actions-setup-cmake@v1
        with:
          cmake-version: "4.1.x"

      - name: Dump Versions
        run: |
          cmake --version
          ninja --version

      - name: Missing Dependencies for IFW
        if: matrix.tools == 'tools_ifw' && startsWith(matrix.os, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libtiff-dev

      - name: Get version from Git tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "Using version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Fallback for non-tag builds (development builds)
            VERSION=0.0.${{ github.run_number }}
            echo "Using fallback version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Configure CMake
        run: cmake -B build -S . -DGAV_VERSION=${{ steps.version.outputs.version }} -DCMAKE_TOOLCHAIN_FILE=${{env.QT_ROOT_DIR}}/lib/cmake/Qt6/qt.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -GNinja

      - name: Build
        run: |
          cd build
          ninja

      - name: Package
        run: |
          cd build
          ninja package

      - name: Upload all build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}-${{ matrix.os }}
          path: build/packages/*

      - name: Upload CPack Error Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cpack-error-log
          path: /home/runner/work/gav/gav/build/_CPack_Packages/Linux/IFW/IFWOutput.log

  pre-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && contains(github.ref_name, '-')
    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./linux-packages
      
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./windows-packages

      - name: Download Mac build artifact
        uses: actions/download-artifact@v4
        with:
          name: mac-build
          path: ./mac-packages

      - name: List downloaded files
        run: |
          echo "Linux packages:"
          ls -la ./linux-packages/
          echo "Windows packages:"
          ls -la ./windows-packages/
          echo "Mac packages:"
          ls -la ./mac-packages/

      - name: Create Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Pre-Release ${{ github.ref_name }}
          draft: false
          prerelease: true
          generate_release_notes: true
          files: |
            ./linux-packages/*
            ./windows-packages/*
            ./mac-packages/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && !contains(github.ref_name, '-')
    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./linux-packages
      
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./windows-packages

      - name: Download Mac build artifact
        uses: actions/download-artifact@v4
        with:
          name: mac-build
          path: ./mac-packages

      - name: List downloaded files
        run: |
          echo "Linux packages:"
          ls -la ./linux-packages/
          echo "Windows packages:"
          ls -la ./windows-packages/
          echo "Mac packages:"
          ls -la ./mac-packages/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./linux-packages/*
            ./windows-packages/*
            ./mac-packages/*
